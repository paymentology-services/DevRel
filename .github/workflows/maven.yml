# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven CI

env:
  CI_SETTINGS_FILE: ci_settings.xml
  DEPLOY_TOKEN: ${{ secrets.MAVEN_RELEASES_REGISTRY_READ_ONLY }}

  # Projects can extend the default MAVEN_CLI_OPTS using this variable
  MAVEN_CLI_OPTS_EXT: ""

  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "-U --batch-mode --errors --fail-at-end -DinstallAtEnd=true -DdeployAtEnd=true"

  # override this if maven should be run in a sub-directory
  MAVEN_ROOT_DIR: Maven_Challenge

  JAVA_VERSION: '17'

  IGNORE_TESTS_MAVEN_CLI_OPTS: "-Ddependency-check.skip=true -DskipTests=true -Dmaven.test.skip=true -Ddocker.skip=true"

on:
  push:
    branches: [ 'main' ]
  pull_request:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:

  maven-build:
    env:
      MAVEN_PACKAGE_CLI_OPTS: "-Dmaven.install.skip -Ddependency-check.skip=true"
  # -Djarsigner.skip=false -Djarsigner.keystore=signer.keystore  -Djarsigner.alias=signer -Djarsigner.storepass=$SIGNER_KEYSTORE_PASSWORD

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-${{ github.job }}-maven-repository-${{ hashFiles('**/pom.xml') }}

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        env:
          JF_URL: ${{ vars.JF_URL }}
        with:
          oidc-provider-name: github
          oidc-audience: jfrog-github

      - name: Build, unit test, integration test with Maven
        shell: bash
        run: |
          set -x
          cd ${MAVEN_ROOT_DIR}
          jf c show
          jf mvn $MAVEN_PACKAGE_CLI_OPTS $MAVEN_CLI_OPTS $MAVEN_CLI_OPTS_EXT clean deploy --file pom.xml -s $CI_SETTINGS_FILE
          jf rt bp

      - name: Archive target directory
        uses: actions/upload-artifact@v4
        with:
          name: target-without-classes
          path: |
            target
            !target/classes

      # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#      - name: Update dependency graph
#        uses: advanced-security/maven-dependency-submission-action@v5

  maven-parent-pom:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-${{ github.job }}-maven-repository-${{ hashFiles('**/pom.xml') }}

      - name: Check parent pom is used
        run: |
          parent_artifact_id="$(mvn $MAVEN_CLI_OPTS help:evaluate -Dexpression=project.parent.artifactId -q -DforceStdout -s $CI_SETTINGS_FILE 2>&1)" && pom_check_success=1 || pom_check_success=0

          if [ $pom_check_success -ne 1 ]; then
            echo "POM checks failed with the following:"
            echo "$parent_artifact_id"
            exit 1
          fi
          if [ "$parent_artifact_id" != "jar-parent-pom" ]; then
          echo "Not using supported parent POM. It should be 'jar-parent-pom' and is '$parent_artifact_id'"
          exit 1
          fi
          echo "Using supported parent POM"

  maven-dependency-check:
    env:
      DEPENDENCY_CHECK_MAX_CVSS: 9

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
          key: ${{ runner.os }}-${{ github.job }}-maven-repository-${{ hashFiles('**/pom.xml') }}

      - name: Build, unit test, integration test with Maven
        run: |
          cd ${MAVEN_ROOT_DIR}
          mvn $IGNORE_TESTS_MAVEN_CLI_OPTS $MAVEN_CLI_OPTS $MAVEN_CLI_OPTS_EXT clean install --file pom.xml -s $CI_SETTINGS_FILE

      - name: Dependency-check
        uses: dependency-check/Dependency-Check_Action@main
        env:
          # actions/setup-java changes JAVA_HOME so it needs to be reset to match the depcheck image
          JAVA_HOME: /opt/jdk
        id: Depcheck
        with:
          project: 'test'
          path: '.'
          format: 'ALL'
          args: >
            --failOnCVSS $DEPENDENCY_CHECK_MAX_CVSS
            --enableRetired

      - name: Upload Test results
        uses: actions/upload-artifact@master
        with:
            name: Depcheck report
            path: ${{github.workspace}}/reports


  docker-lint:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile

  docker-build:

    runs-on: ubuntu-latest
    needs: maven-build

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Download target because it has build artifacts
        uses: actions/download-artifact@v4
        with:
          name: target-without-classes
          path: target

      - name: Build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: user/app:latest
